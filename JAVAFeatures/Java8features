	   **************** Java 8 Features****************

1) forEach() Method:

  -It is defined in Iterable and Stream interface.
  -Collection classes which extends Iterable interface can use forEach loop to iterate elements.
  -example:

	=>  gamesList.forEach(games -> System.out.println(games));

  -There is also a method called forEachOrdered() which performs operation on stream w.r.t. the encounter order of the stream. While forEach() is does not guarantee the order.

  -link => https://howtodoinjava.com/java8/java-stream-foreachordered/



2) Lambda Expressions:

  -It is used to provide the implementation for functional interfaces.
  -syntax, 

	(argument-list) -> {body}

  -example:

	=>  interface Addable{  
		int add(int a,int b);  
	     }
	Addable ad1=(a,b)->(a+b);  
        System.out.println(ad1.add(10,20));

  -link => https://www.javatpoint.com/java-lambda-expressions


3)Method References:

  -It is a special type of lambda function.

   A)Reference to static method:
  
	List<String> messages = Arrays.asList("hello", "baeldung", "readers!");

	with lambda expression =>
	 messages.forEach(word -> StringUtils.capitalize(word));
	
	with method reference =>
	 messages.forEach(StringUtils::capitalize);

   B)Reference to an Instance Method:
   C)Reference to a Constructor:

  -link => https://www.baeldung.com/java-method-references


===================================================================================================
################ Java 8 #######################
-------------------------------------------------------------------------------------------------
I) Lambda Expression:
# Lambda expression (or function) is just an anonymous function,
  i.e., They are nameless functions given as constant values, and written exactly
	in the place where it’s needed, typically as a parameter to some other function.
  
  Syntax : (x, y) -> x + y  //This function takes two parameters and return their sum.
  Examples: 
   i) (int a, int b) ->    a * b    // takes two integers and returns their multiplication
  ii) (a, b) ->   a - b             // takes two numbers and returns their difference
 iii) () -> 99                      // takes no values and returns 99
  iv) (String a) -> System.out.println(a) 
	// takes a string, prints its value to the console, and returns nothing
   v) a -> 2 * a                    // takes a number and returns the result of doubling it
  vi) c -> { //some complex statements }  // takes a collection and do some procesing	

  Note:
- A lambda expression can have zero, one or more parameters.
- The type of the parameters can be explicitly declared or it can be inferred from the context.
- Multiple parameters are enclosed in mandatory parentheses and separated by commas.
- Empty parentheses are used to represent an empty set of parameters.
- The body of the lambda expressions can contain zero, one or more statements.

-------------------------------------------------------------------------------------------------
II) Method References:

# Method reference to static method – Class::staticMethodName
  An example to use Math.max() which is static method.
 
  -> List<Integer> integers = Arrays.asList(1,12,433,5);
     Optional<Integer> max = integers.stream().reduce( Math::max );
     max.ifPresent(value -> System.out.println(value));
     # Above line can also be written as --> max.ifPresent(System.out::println());

# Method reference to instance method from instance – ClassInstance::instanceMethodName
  -> max.ifPresent( System.out::println );

# Method reference to instance method from class type – Class::instanceMethodName
         
  -> List<String> strings = Arrays.asList("how", "to", "do", "in", "java", "dot", "com");

    --> List<String> sorted = strings
                .stream()
                .sorted((s1, s2) -> s1.compareTo(s2))
                .collect(Collectors.toList());
        System.out.println(sorted);

# Above example shows how sorted() method can be used with lambda expression.
# Below example shows how sorted() method can be used with Method References.

    --> List<String> sortedAlt = strings
                .stream()
                .sorted(String::compareTo)
                .collect(Collectors.toList());
        System.out.println(sortedAlt);

#  Reference to constructor – Class::new

   -> List<Integer> integers1 = IntStream
				.range(1, 100)
                		.boxed() 
                		.collect(Collectors.toCollection( ArrayList::new ));
	# .boxed() it is used to convert Primitive data types,to their respective wrapper classes.

      Optional<Integer> max1 = integers1.stream().reduce(Math::max);
      max1.ifPresent(System.out::println);

-------------------------------------------------------------------------------------------------
III) .forEach():
	
# Iterating over all elements of a stream and performing an action on it.
# In this example, we are printing all even numbers
  -> numberList.stream()
	.filter(n -> n % 2 == 0)
	.forEach(System.out.println(System.out::println));

# forEach method using List.
  -> numberList.forEach(listAction);

# Consumer<T> is an Functional interface, It has only one method - action(T t)
  -> Consumer<Integer> listAction = System.out::println;

# forEach example using Map.
  -> HashMap<String, Integer> map = new HashMap<>();
        map.put("A", 1);
        map.put("B", 2);
        map.put("C", 3);

  -> 1) Map entries:
        .entrySet() - is used to fetch (key, value)
        --> Consumer<Map.Entry<String, Integer>> mapAction = System.out::println;
            map.entrySet().forEach(mapAction);

  -> 2) Map keys:
        .keySet() - is used to fetch keys from map object.
        --> Consumer<String> mapActionOnKeys = System.out::println;
            map.keySet().forEach(mapActionOnKeys);

  -> 3) Map values:
        .values() - is used to fetch values from map object.
        --> Consumer<Integer> mapActionOnValues = System.out::println;
            map.values().forEach(mapActionOnValues);

# We can create custom action methods as well to perform our custom logic,
  for each element in the collection.
        
   -> Consumer<Map.Entry<String, Integer>> customAction = entry -> {
      	System.out.println("Key is: "+ entry.getKey());
      	System.out.println("Value is: "+ entry.getValue());
      };
      map.entrySet().forEach(customAction);

-------------------------------------------------------------------------------------------------
IV) Functional Interface:

# Functional interfaces are new additions in java 8 which permit exactly one abstract method inside them. 
  These interfaces are also called Single Abstract Method interfaces (SAM Interfaces).
# In Java 8, functional interfaces can be represented using lambda expressions, method reference and
  constructor references as well.
# Java 8 introduces an annotation i.e. @FunctionalInterface too, which can be used for compiler level errors
  when the interface you have annotated violates the contracts of exactly one abstract method.

-->  
# Adding more than one abstract method in Functional Interface is not allowed, it will throw an error.
   
  -> @FunctionalInterface
     interface MyFunctionalInterface {
	public void standardOperations();
     	public void moreOperations(); // Having this method will throw error.


	# default methods have implementations, so they are not abstract.
	  So you can add as many as default methods to your functional interface.
    
    	default void operation1(){
        	//Add Operations to perform
        	System.out.println("Performing Operations 1");
    	}
    	default void operation2(){
        	//Add Operations to perform
        	System.out.println("Performing Operations 2");
    	}
	
	# If an interface declares an abstract method overriding one of the public methods of
	  java.lang.Object, that also does not count toward the interface’s abstract method count since any
          implementation of the interface will have an implementation from java.lang.Object

    	@Override
    	public String toString(); //Overridden from Object class

	@Override
    	public boolean equals(Object o); //Overridden from Object class
     }

-------------------------------------------------------------------------------------------------
V) Optional Class

#  Optional is a way of replacing a nullable T reference with a non-null value.
   An Optional may either contain a non-null T reference (in which case we say the reference
   is “present”), or it may contain nothing (in which case we say the reference is “absent”).
   Note: It is never said that optional “contain null”.

    ->	Optional<Integer> canBeEmpty1 = Optional.of(5);
        canBeEmpty1.isPresent(); // returns true
        canBeEmpty1.get();       // returns 5

        Optional<Integer> canBeEmpty2 = Optional.empty();
        canBeEmpty2.isPresent(); // returns false

        
       #Three ways to create an Optional
        i) use Optional.empty() to create an empty optional.
  
        -> Optional<Integer> possible = Optional.empty();

       ii) Use Optional.of() to create optional with default non-null value.
             If you pass null in of(), then a NullPointerException is thrown immediately.

        -> Optional<Integer> possible1 = Optional.of(5);

      iii) Use Optional.ofNullable() to create an Optional object that may hold a null value.
              If parameter is null, the resulting Optional object would be empty
              (remember that value is absent; don’t read it null).
        
        -> Optional<Integer> possible2 = Optional.ofNullable(null);
        	// or
        -> Optional<Integer> possible3 = Optional.ofNullable(5);
-------------------------------------------------------------------------------------------------
VI) Predicate

# Predicate is a functional interface and can therefore be used as the assignment target,
  for a lambda expression or method reference.

# I will say you can use predicates anywhere where you need to evaluate a condition on group/collection,
  of similar objects such that evaluation can result either in true or false.

    1) All Employees who are male and age more than 21
    -> public static Predicate<Employee> isAdultMale() {
         return p -> p.getAge() > 21 && p.getGender().equalsIgnoreCase("M");
       }
    ## For clear idea about this checkout PredicateDemo Package in Java 8 features on github.

-------------------------------------------------------------------------------------------------
VII) Stream API

# A Stream in Java can be defined as a sequence of elements from a source that supports,
  aggregate operations on them. The source here refers to a Collections or Arrays,
  who provides data to a Stream.

# Stream keeps the ordering of the data as it is in the source.
  The aggregate operations or bulk operations are operations which allow us to express,
  common manipulations on stream elements easily and clearly.

# *) Filter:
     Filter accepts a predicate to filter all elements of the stream.
     This operation is intermediate which enables us to call another stream operation,
     on the result.

     long count = li.stream()
                     .filter(s->!(s.length() < 7))
                     .count();

     System.out.println("Count of Strings !(less) than 7 characters: "+count);

# *) Iterating values using Stream

     Stream.iterate(1, c -> c+1)
             .filter(no->no%3==0)
             .limit(5)
             .forEach(System.out::println);

# *) List Concatenation using Stream

     List<String> lis = Arrays.asList("Pooja","Abhishek","Rohit","Sagar");
     Stream<String> opstream = Stream.concat(li.stream(),lis.stream());
     opstream.forEach(System.out::println);

# *) Integer Stream

     int i = IntStream
             .range(1, 11)
             //if filter is not used then it will print from 1 to 10.
             .filter(no -> no%2 == 0)
             //skip option will skip values by the argument passed.
             .skip(2)
             .sum();
     //.sequential()
     //.unordered()
     //.forEach(System.out::print);
     System.out.println(i);

# *) Stream.of, sorted and findFirst.

     Stream.of("Da","Ba","Aa","Da")
             .sorted()
             .findFirst()
             //.findAny()
             .ifPresent(System.out::println);

# *) Stream from Array, sort, filter and print

     li.stream()
             .filter(x -> x.startsWith("S"))
             .sorted()
             .forEach((x) -> System.out.println(x));

# *) Average of squares of an int Array

     Arrays.stream(new int[]{2,4,6,8})
             .map(x-> x*x)
             .average()
             .ifPresent(System.out::println);

# *) Stream from List, filter and print

     li
             .stream()
             .map(String::toLowerCase)
             .filter(x -> x.startsWith("a"))
             .forEach(System.out::println);

# *)  Stream.reduce():
      This terminal operation performs a reduction on the elements of the stream,
       with the given function. The result is an Optional holding the reduced value.

     Optional<String> reduced = li.stream()
             .reduce((s1,s2) -> s1 + "#" + s2);

     reduced.ifPresent(System.out::println);

# *) Reduction - summary

     IntSummaryStatistics summary = IntStream.of(7, 2, 19, 88, 73, 4, 10)
             .summaryStatistics();
     System.out.println(summary);

# *) Stream Collectors groupingBy() & counting()

     List< String> names = Arrays.asList("Hello","Welcome","to","Java_8","Hello","Java_8");
     Map< String, Long> hm = (Map< String, Long>) names.stream()
             .collect(Collectors.groupingBy(Function.identity(),Collectors.counting()));
     System.out.println(hm);

# *) Type 1: Convert Stream to List

     List<Integer> list = new ArrayList<Integer>();
     for(int j = 1; j< 10; j++){
         list.add(i);
     }
     Stream<Integer> stream = list.stream();
     List<Integer> evenNumbersList = stream
             .filter(j -> j%2 == 0)
             .collect(Collectors.toList());
     System.out.print(evenNumbersList);

# *) Type 2: Convert Stream to array

     List<Integer> list1 = new ArrayList<Integer>();
     for(int a = 1; a< 10; a++){
         list1.add(a);
     }
     Stream<Integer> stream1 = list.stream();
     Integer[] evenNumbersArr = stream1.filter(a -> a%2 == 0).toArray(Integer[]::new);
     System.out.print(evenNumbersArr);

-------------------------------------------------------------------------------------------------

